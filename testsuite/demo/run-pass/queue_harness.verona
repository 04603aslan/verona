// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// This just directly includes the queue file. Stop gap until module system
// and packaging implenented
// Module system will work on a directory level, rather than individual file
use "library/queue.verona"

class Main
{
  refine(a: Queue[U64Obj]) {}

  main()
  {
    var q = mut-view (Queue.create());

    // Type inference is choosing Queue[U64Obj & iso], which we can't codegen yet.
    Main.refine(q);

    q.add(U64Obj.create(1));
    q.add(U64Obj.create(2));

    var a1 = q.remove();
    Main.print(a1);
    // CHECK-L: Queue elem: 1
    var a2 = q.remove();
    Main.print(a2);
    // CHECK-L: Queue elem: 2
    var a3 = q.remove();
    Main.print(a3);
    // CHECK-L: Queue empty
  }

  print(a: (U64Obj & iso) | (None & imm))
  {
    match (a)
    {
      var vv: U64Obj => Builtin.print1("Queue elem: {}\n", (mut-view vv).v),
      var n: None   => Builtin.print("Queue empty\n"),
    }
  }
}